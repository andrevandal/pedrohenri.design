---
// https://stackoverflow.com/questions/74919230/how-to-customize-markdown-with-astro-components
import type { ComponentProps } from 'astro/types'
import { getCollection, getEntry } from 'astro:content'
import { fromMarkdown } from 'mdast-util-from-markdown'
import { directive } from 'micromark-extension-directive'
import { directiveFromMarkdown } from 'mdast-util-directive'

import BaseLayout from '@layouts/Base.astro'
import ContentMarkdown from '@components/content/Markdown.astro'

const { slug } = Astro.params

if (slug === undefined) {
  throw new Error('Slug is required')
}

export const prerender = true

export async function getStaticPaths() {
  const allPosts = await getCollection('posts', (post) => {
    return !post.data.draft && !post.data.private
  })
  return allPosts.map((post) => ({
    params: { slug: post.slug }
  }))
}

const post = await getEntry('posts', slug)

if (post === undefined || post.data.draft) {
  return Astro.redirect('/404')
}

const meta = {
  title: `${post.data.title} - Pedro Henri Design`,
  description: post.data.description,
  image: post.data.socialImage,
  url: Astro.url
} satisfies ComponentProps<typeof BaseLayout>

const contentTree = fromMarkdown(post.body, {
  extensions: [directive()],
  mdastExtensions: [directiveFromMarkdown()]
})

const mainCategory = await getEntry('categories', post.data.categories[0].slug)
---

<BaseLayout {...meta}>
  <article class='container mx-auto flex flex-col pt-6 pb-8 lg:pt-10 lg:pb-12'>
    <header class='flex flex-col pb-4'>
      {
        mainCategory && (
          <a
            href={`/categorias/${mainCategory.slug}/`}
            class='text-sm uppercase leading-[1.059rem] text-gray-500'
          >
            {mainCategory.data.name}
          </a>
        )
      }

      <h1 class='text-[2rem] font-bold leading-[2.421rem] text-gray-900'>
        {post.data.title}
      </h1>
    </header>
    <div class='prose w-full max-w-full'>
      <ContentMarkdown node={contentTree} />
    </div>
  </article>

  <style>
    .prose :where(h2),
    .prose :where(h3),
    .prose :where(h4) {
      a {
        @apply no-underline;
      }
    }
  </style>
</BaseLayout>
